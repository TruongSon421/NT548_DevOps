AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a VPC with public and private subnets, an Internet Gateway, and a default Security Group.

Parameters:
  Name:
    Type: String
    Description: Name prefix for all resources
  VpcCIDR:
    Type: String
    Description: CIDR block for the VPC
    Default: "10.0.0.0/16"
  PublicSubnetCIDR1:
    Type: String
    Description: CIDR block for the public subnet 1
    Default: "10.0.1.0/24"
  PublicSubnetCIDR2:
    Type: String
    Description: CIDR block for the public subnet 2
    Default: "10.0.2.0/24"
  PrivateSubnetCIDR1:
    Type: String
    Description: CIDR block for the private subnet 1
    Default: "10.0.3.0/24"
  PrivateSubnetCIDR2:
    Type: String
    Description: CIDR block for the private subnet 2
    Default: "10.0.4.0/24"
  AvailabilityZone1:
    Type: String
    Description: Availability Zone 1
    Default: "us-east-1a"
  AvailabilityZone2:  
    Type: String
    Description: Availability Zone 2
    Default: "us-east-1b"

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Name}-vpc"
        - Key: Environment
          Value: !GetAtt Tags.Environment

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Name}-igw"

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-subnet-1"
  
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-subnet-2"

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-1"
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-2"

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  DefaultSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Default security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub "${Name}-default-sg"

  Outputs:
    VPCId:
      Value: !Ref VPC
      Description: VPC ID
      Export:
        Name: !Sub ${AWS::StackName}-VPCId

    InternetGatewayId:
      Value: !Ref InternetGateway
      Description: Internet Gateway ID

    PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnets

    PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
      Export:
        Name: !Sub ${AWS::StackName}-PrivateSubnets

    DefaultSecurityGroup:
      Description: Default Security Group
      Value: !Ref DefaultSecurityGroup
      Export:
        Name: !Sub ${AWS::StackName}-DefaultSecurityGroup